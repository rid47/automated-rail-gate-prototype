//-----------------------------Including Servo Library-------------------------------//

#include <Servo.h>
Servo gate1;
Servo gate2;
Servo gate3;
Servo gate4;
//------------------------------Defining required pins----------------------------------//

#define MUX_A D2
#define MUX_B D3
#define ANALOG_INPUT A0


//-----------------------------Defining required variables------------------------------//

volatile int sensorValue;
int closingldrValue=0;
int openingldrValue=0;
int obstacleldr1Value=0;
int obstacleldr2Value=0;

//---------------------------Defining Servo position--------------------------------------//

int opened=150;
int closed=0;
int halfclosed=75;


// Reading only closingldr until it senses train (1:read; 0:no need to read) 

int closingldrRead=1;
int obstacleldrRead=0;
int openingldrRead=0;
int gateStatus=0;


//----------------------------Setup function--------------------------------------------//

void setup() {
  
  Serial.begin(115200);
  
  //Deifne Channel Selection PIN for MUX
  
  pinMode(MUX_A, OUTPUT);
  pinMode(MUX_B, OUTPUT); 

  //Attacing 4 servos on D5,D6,D7,D8 of Node MCU
  gate1.attach(15);
  gate2.attach(14);
  gate3.attach(13);
  gate4.attach(12);

  //Initializing All 4 Gates @ Open State
  gate1.write(opened);
  gate2.write(opened);
  gate3.write(opened);
  gate4.write(opened);
  //delay(1000);       
}


//---------------------------Main Loop---------------------------------------------------//

void loop() {
  

  if (closingldrRead==1){
  closingldrValue=gateClosingLDR();
  Serial.print("closingldrValue:");
  Serial.println(closingldrValue);
  if (closingldrValue<600) //Approaching train detected
  
  {
  Serial.println("Train approaching railgate");
  closingldrRead=0;
  obstacleldrRead=1;
  }}

  if (obstacleldrRead==1){
  
  obstacleldr1Value=obstaclSensigLDR1();
  obstacleldr2Value=obstaclSensigLDR2();
  Serial.print("obstacleldr1Value:");
  Serial.println(obstacleldr1Value);
  Serial.print("obstacleldr2Value:");
  Serial.println(obstacleldr2Value);
  
  if (obstacleldr1Value<600)// Obstacle detected

  {
    Serial.println("Half close gate 1 & 4");
    gate1.write(halfclosed);
    gate4.write(halfclosed);
    Serial.println("Send message to driver: Obstacle ahead");
  }

  if(obstacleldr2Value<600){

    Serial.println("Half close gate 2 & 3");
    gate2.write(halfclosed);
    gate3.write(halfclosed);
    Serial.println("Send message to driver: Obstacle ahead");
    
  }
  if (obstacleldr1Value>600 && obstacleldr2Value>600)
  {

   Serial.println("No obstacle on the Rail line");
   Serial.println("Completely close all 4 gates");
   gate1.write(closed);
   gate2.write(closed);
   gate3.write(closed);
   gate4.write(closed);
   Serial.println("Send message to driver: Clear to go");
   obstacleldrRead=0;
   openingldrRead=1;
  
  }
  }

  if (openingldrRead==1){
   openingldrValue=gateOpeningLDR();
   Serial.print("openingldrValue:");
   Serial.println(openingldrValue);
   if(openingldrValue<600)//Departing train detected
  { 
    Serial.println("Departing train detected");
    gateStatus=1;
  
  }}
  
  if (gateStatus==1 && openingldrValue>600)//Train Departed
  {

      Serial.println("Train departed;open all 4 gates");
      
      gate1.write(opened);
      gate2.write(opened);
      gate3.write(opened);
      gate4.write(opened);
   
      
      closingldrRead=1;
      openingldrRead=0;
      gateStatus=0;
      
      
    }
  
}

//--------------------------------Reading Approacing Train Sensor--------------------------//

int gateClosingLDR(){

//for(int j=0;j<50;j++){
  changeMux(1,0);
  sensorValue = analogRead(ANALOG_INPUT); 
  //Serial.print("Obstacle sensing LDR value:");
  //Serial.println(sensorValue);
  delay(1000);
  return sensorValue;
  
  //}
}

//-------------------------------Reading Obstacle Sensor at the Rail Gate area-------------//

int obstaclSensigLDR1(){
//for(int k=0;k<50;k++){
  changeMux(1,1);
  sensorValue = analogRead(ANALOG_INPUT); 
  //Serial.print("Gate closing LDR value:");
  //Serial.println(sensorValue);
  delay(1000);
  
  return sensorValue;
  
  //}
}

int obstaclSensigLDR2(){
//for(int k=0;k<50;k++){
  changeMux(0,1);
  sensorValue = analogRead(ANALOG_INPUT); 
  //Serial.print("Gate closing LDR value:");
  //Serial.println(sensorValue);
  delay(1000);
  
  return sensorValue;
  
  //}
}


//----------------------------------Reading Departing Train Sensor--------------------------//


int gateOpeningLDR()

{ 
//for(int i=0;i<50;i++){
  changeMux(0,0);
  sensorValue = analogRead(ANALOG_INPUT);
  //Serial.print("Gate opening LDR value:");
  //Serial.println(sensorValue);
  delay(1000);
  return sensorValue;
  
  
  //}
}

//-------------------------------MUX Channel Selection-------------------------------------//

void changeMux(int b, int a) {
  digitalWrite(MUX_B, b);
  digitalWrite(MUX_A, a);
  
}

//------------------------------Rail Gate Motor Rotation-----------------------------------//

/*
openGate1()
openGate2()
openGate3()
openGate4()

closeGate1()
closeGate2()
closeGate3()
closeGate4()

halfcloseGate1()
halfcloseGate2()
halfcloseGate3()
halfcloseGate4()



*/
